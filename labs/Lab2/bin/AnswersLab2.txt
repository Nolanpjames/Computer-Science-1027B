Answers for Lab 2
-----------------------------------------------



EXERCISE 1

1. Should instance variable interestRate be declared as static? Explain.

interestRate should not be declared as static. Since each object of the class will have a different interestRate, it should not be static, otherwise each object will point to the exact same static variable.

2. Write the output from the test harness for class SavingsAccount. 

SavingsAccount: balance $115.0, interest rate 0.15


EXERCISE 2

3. Which method(s) of the class CheckingAccount demonstrate overriding? Which methods demonstrate overloading?
Overriding: deposit, withdraw, toString. Overloading: none

4. Is bacc0 = chacc1 legal? Why?
Yes. chacc1 belongs to a child class that extends the class that bacc0 belongs to

5. Is chacc1 = bacc1 legal? Why?
No. bacc1 belongs to the parent class that the chacc1 object derives from.

6. On which variables bacc1, chacc1, sacc1 was the invocation to method
deductFees() valid? Explain.

Only chacc1. We used casting earlier to convert it to class type CheckingAccount, which contains the deductFees() method

7. Which compilation error(s) could be fixed through casting? Which one(s)
could not be fixed? Why?

The error involving bacc1 could be fixed through casting. The variable bacc1 can be cast to CheckingAccount since it is of type BankAccount.
The error involving sacc1 could not be fixed through casting. The variable sacc1 is pointing to a SavingsAccount object, and as such, the variable cannot be cast to a CheckingAccount

8. Does the program run after deleting the line causing the compilation 
error? If the program crashed, why did it crash?

It crashed. The variable bacc1 is still pointing to a BankAccount object, which doesn't contain the deductfees() method

9. What was the runtime error obtained when changing super.deposit(amount)
to deposit(amount) in class CheckingAccount.java? 

This code revision meant that the deposit method would continuously & recursively call itself. Calling this method would lead to a never-ending loop, causing the runtime error at execution.

10. How many times is method deposit invoked?

If we implement the Q9 code revision, then infintely many.


EXERCISE 3

11. Why does the compiler issue an error message when invoking newAcc.getTransactionCount()? Why does the compiler issue an error message when invoking newAcc.getInterestRate()?

newAcc is a variable of BankAccount type. The BankAccount class doesn't contain either of the 2 methods, causing a compiler error.



12. Can you tell whether in the statement String accountInfo = newAcc.toString(); the
method toString() being invoked is from the class CheckingAccount or from the class
SavingsAccount? Explain your answer.

I cannot tell just by examining the code. This is a case of dynamic(late) binding. Since both the superclass & subclass in either case contains the toString() method, it is guaranteed that the method will run smoothly. We don't know which class the method will be invoked from until run-time.   
